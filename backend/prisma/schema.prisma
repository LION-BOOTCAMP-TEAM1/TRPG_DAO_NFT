generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  walletAddress      String               @unique
  nonce              String?              // 로그인 인증에 사용되는 nonce 값
  createdAt          DateTime             @default(now())
  chapterProgress    ChapterProgress[]
  characters         Character[]
  playerNFTs         PlayerNFT[]
  SessionParticipant SessionParticipant[]
  storyProgress      StoryProgress[]
  UserAction         UserAction[]
  Session            Session[]            @relation("UserSession")
}

model CharacterClass {
  id               Int         @id @default(autoincrement())
  code             String      @unique
  name             String
  description      String
  recommendedStat1 String
  recommendedStat2 String
  characters       Character[]
}

model Character {
  id           Int            @id @default(autoincrement())
  userId       Int
  sessionId    Int?
  name         String
  gender       String
  age          Int
  attribute    String
  health       Int            @default(4)
  strength     Int            @default(4)
  agility      Int            @default(4)
  intelligence Int            @default(4)
  wisdom       Int            @default(4)
  charisma     Int            @default(4)
  physicalAttack Int          @default(10)
  magicAttack  Int            @default(10)
  createdAt    DateTime       @default(now())
  classId      Int
  hp           Int            @default(4)
  mp           Int            @default(4)
  class        CharacterClass @relation(fields: [classId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  session      Session?       @relation(fields: [sessionId], references: [id])
  inventory    Inventory?
}

model UserAction {
  id        Int      @id @default(autoincrement())
  userId    Int
  questId   Int
  choiceId  Int?
  result    String
  createdAt DateTime @default(now())
  choice    Choice?  @relation(fields: [choiceId], references: [id])
  quest     Quest    @relation(fields: [questId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Genre {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String
  description String?
  storyWorlds StoryWorld[]
}

model StoryWorld {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  coverImage  String?
  createdAt   DateTime  @default(now())
  genreId     Int?
  Session     Session[]
  stories     Story[]
  genre       Genre?    @relation(fields: [genreId], references: [id])
}

model Story {
  id              Int               @id @default(autoincrement())
  slug            String            @unique
  title           String
  summary         String
  createdAt       DateTime          @default(now())
  storyWorldId    Int?
  imageUrl        String?
  BranchPoint     BranchPoint[]
  chapters        Chapter[]
  quests          Quest[]
  SessionProgress SessionProgress[]
  StoryWorld      StoryWorld?       @relation(fields: [storyWorldId], references: [id])
  StoryProgress   StoryProgress[]
  StoryScene      StoryScene[]
}

model StoryScene {
  id        Int      @id @default(autoincrement())
  storyId   Int
  text      String
  createdAt DateTime @default(now())
  sequence  Int      @default(0)
  story     Story    @relation(fields: [storyId], references: [id])
}

model StoryProgress {
  id               Int      @id @default(autoincrement())
  userId           Int
  storyId          Int
  currentQuestId   Int?
  completed        Boolean  @default(false)
  lastUpdated      DateTime @updatedAt
  currentChapterId Int?
  story            Story    @relation(fields: [storyId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Chapter {
  id              Int               @id @default(autoincrement())
  storyId         Int
  title           String
  description     String
  sequence        Int               @default(0)
  imageUrl        String
  createdAt       DateTime          @default(now())
  slug            String            @unique
  story           Story             @relation(fields: [storyId], references: [id])
  ChapterProgress ChapterProgress[]
  quests          Quest[]
}

model ChapterProgress {
  id             Int      @id @default(autoincrement())
  userId         Int
  chapterId      Int
  currentQuestId Int?
  completed      Boolean  @default(false)
  lastUpdated    DateTime @updatedAt
  chapter        Chapter  @relation(fields: [chapterId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, chapterId])
}

model Quest {
  id          Int          @id @default(autoincrement())
  slug        String       @unique
  storyId     Int
  title       String
  description String
  chapterId   Int?
  choices     Choice[]
  chapter     Chapter?     @relation(fields: [chapterId], references: [id])
  story       Story        @relation(fields: [storyId], references: [id])
  UserAction  UserAction[]
}

model Choice {
  id              Int               @id @default(autoincrement())
  slug            String            @unique
  questId         Int
  text            String
  nextStoryId     Int?
  quest           Quest             @relation(fields: [questId], references: [id])
  ChoiceCondition ChoiceCondition[]
  PlayerNFT       PlayerNFT[]
  UserAction      UserAction[]
}

model BranchPoint {
  id               Int                @id @default(autoincrement())
  slug             String             @unique
  storyId          Int
  title            String
  description      String
  daoVoteId        String?
  status           BranchPointStatus  @default(OPEN)
  resultChoiceId   Int?               @unique
  resultChoice     DAOChoice?         @relation("BranchPointResultChoice", fields: [resultChoiceId], references: [id])
  story            Story              @relation(fields: [storyId], references: [id])
  BranchPointScene BranchPointScene[]
  DAOChoice        DAOChoice[]        @relation("BranchPointDAOChoices")
}

model BranchPointScene {
  id            Int         @id @default(autoincrement())
  branchPointId Int
  order         Int
  text          String
  branchPoint   BranchPoint @relation(fields: [branchPointId], references: [id])
}

model DAOChoice {
  id                Int          @id @default(autoincrement())
  branchPointId     Int
  text              String
  nextStoryId       Int
  voteCount         Int          @default(0)
  createdAt         DateTime     @default(now())
  resultBranchPoint BranchPoint? @relation("BranchPointResultChoice")
  branchPoint       BranchPoint  @relation("BranchPointDAOChoices", fields: [branchPointId], references: [id])
}

model Inventory {
  id          Int             @id @default(autoincrement())
  characterId Int             @unique
  maxSlots    Int             @default(20)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  character   Character       @relation(fields: [characterId], references: [id])
  items       InventoryItem[]
}

model Item {
  id             Int             @id @default(autoincrement())
  code           String          @unique
  name           String
  description    String
  imageUrl       String?
  rarity         ItemRarity      @default(COMMON)
  itemType       ItemType
  useEffect      String?
  statBonus      Json?
  isConsumable   Boolean         @default(false)
  isNFT          Boolean         @default(false)
  createdAt      DateTime        @default(now())
  inventoryItems InventoryItem[]
}

model InventoryItem {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  itemId      Int
  quantity    Int       @default(1)
  equipped    Boolean   @default(false)
  nftTokenId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  item        Item      @relation(fields: [itemId], references: [id])

  @@unique([inventoryId, itemId, nftTokenId])
}

model PlayerNFT {
  id         Int      @id @default(autoincrement())
  userId     Int
  nftTokenId String   @unique
  choiceId   Int?
  createdAt  DateTime @default(now())
  itemId     Int?
  choice     Choice?  @relation(fields: [choiceId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Session {
  id           Int                  @id @default(autoincrement())
  name         String
  createdAt    DateTime             @default(now())
  storyWorldId Int
  storyWorld   StoryWorld           @relation(fields: [storyWorldId], references: [id])
  participants SessionParticipant[]
  progress     SessionProgress?
  users        User[]               @relation("UserSession")
  characters   Character[]
}

model SessionParticipant {
  id        Int      @id @default(autoincrement())
  sessionId Int
  userId    Int
  isReady   Boolean  @default(false)
  hasVoted  Boolean  @default(false)
  role      String?
  joinedAt  DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId])
}

model SessionProgress {
  id               Int           @id @default(autoincrement())
  sessionId        Int           @unique
  storyId          Int
  currentQuestId   Int?
  daoStatus        SessionStatus @default(IDLE)
  lastUpdated      DateTime      @updatedAt
  currentChapterId Int?
  currentSceneId   Int?
  session          Session       @relation(fields: [sessionId], references: [id])
  story            Story         @relation(fields: [storyId], references: [id])
}

model ChoiceCondition {
  id              Int     @id @default(autoincrement())
  choiceId        Int
  classOnly       String?
  minStrength     Int?
  minWisdom       Int?
  minCharisma     Int?
  minAgility      Int?
  minHealth       Int?
  minHp           Int?
  minIntelligence Int?
  minMp           Int?
  choice          Choice  @relation(fields: [choiceId], references: [id])
}

enum BranchPointStatus {
  OPEN
  CLOSED
}

enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum ItemType {
  WEAPON
  ARMOR
  ACCESSORY
  CONSUMABLE
  QUEST_ITEM
  MISCELLANEOUS
}

enum SessionStatus {
  IDLE
  VOTING
  RESOLVED
}
